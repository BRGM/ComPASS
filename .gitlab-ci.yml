variables:
  COMPASS_SDK: 0.3.0
  # We assume that it is fine to run mpi as root in a docker container
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1

image:
  name: "${COMPASS_SDK_REGISTRY}:${COMPASS_SDK}"

# Pipelines will always be triggered when scheduled,
# triggered manually using the web API or in the context of a merge request.
# Pipelines will not be triggered by commits on the default branch
# (nightly scheduled pipelines will run CI on the default branch).
# Pipelines will not be triggered by commits on branches with name starting with NOCI
# (except in the abovementioned cases).
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_OPEN_MERGE_REQUESTS == null && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_BRANCH !~ /^NOCI/

stages:
  - check
  - build
  - test
  - release
  - documentation

check format:
  stage: check
  tags:
    - linux
    - medium
  script:
    # We could check format only for merge requests
    # using only merge_requests
    # and CI_MERGE_REQUEST_SOURCE_BRANCH_SHA and CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
    # variables but the latest are not correclyt set
    - git fetch origin ${CI_DEFAULT_BRANCH}
    - merge_base=$(git merge-base origin/${CI_DEFAULT_BRANCH} HEAD)
    - changed_files=$(git diff --no-ext-diff --name-only ${merge_base}...HEAD)
    - echo "Changed files:" ${changed_files}
    - pre-commit run --files ${changed_files}

conda pristine build:
  stage: build
  image: continuumio/miniconda3:23.5.2-0-alpine
  tags:
    - build
    - docker
  rules:
   - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
   - if: '$CI_PIPELINE_SOURCE == "web"'
  script:
    - conda install -n base -c conda-forge -y mamba
    - mamba env create --file conda/compass.yml
    - conda run -n compass python -m pip -vvv install .
    - cd test/bulk
    - conda run -n compass python doublet_on_cartesian_grid.py

build:
  stage: build
  tags:
    - build
    - docker
  before_script:
    - unset CMAKE_ARGS
    - python -m pip install build
    - python -m pip install pybind11
  script:
    - >
      if [ "$CI_COMMIT_REF_NAME" == "$CI_DEFAULT_BRANCH" ] || [ -n "$CI_COMMIT_TAG" ]; then
        python -m build --outdir dist --no-isolation -Ccmake.define.ComPASS_WITH_ALL_PHYSICS=ON .
      else
        python -m build --outdir dist --no-isolation \
        -Ccmake.build-type=Debug \
        -Ccmake.define.ComPASS_WITH_water2ph_PHYSICS=ON \
        -Ccmake.define.ComPASS_WITH_diphasic_PHYSICS=ON \
        -Ccmake.define.ComPASS_WITH_diphasicCO2_PHYSICS=ON \
        -Ccmake.define.ComPASS_WITH_immiscible2ph_PHYSICS=ON \
        -Ccmake.define.ComPASS_WITH_linear_water_PHYSICS=ON \
        .
      fi
  artifacts:
    paths:
    - dist/
    expose_as: wheel
    when: on_success

baseline tests:
  stage: test
  tags:
    - linux
    - medium
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test/baseline
    - >
      for f in \
        MO1/MO1.py \
        MO2/MO2-casea.py \
        MO2/MO2-caseb.py \
        MO2/MO2-casec.py \
        MO3/MO3-casea.py \
        MO3/MO3-caseb.py \
        MO4/MO4.py \
        SO1/SO1.py \
        SO2/SO2.py
      do
        echo "------------------------------------------------------------"
        echo "Running: $f"
        echo "------------------------------------------------------------"
        python $f
      done

baseline parallel tests:
  stage: test
  tags:
    - linux
    - large
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test/baseline
    - >
      for f in \
        MO2/MO2-casea.py \
        MO2/MO2-caseb.py \
        MO2/MO2-casec.py \
        MO3/MO3-casea.py \
        MO3/MO3-caseb.py \
        MO4/MO4.py \
        SO1/SO1.py \
        SO2/SO2.py
      do
        echo "------------------------------------------------------------"
        echo "Running: $f"
        echo "------------------------------------------------------------"
        mpirun -n `nproc` python $f
      done

pytest:
  stage: test
  tags:
    - linux
    - large
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test/fast # change directory otherwise import ComPASS conflicts with source
    - python -m pytest

time bulk scripts:
  stage: test
  tags:
    - linux
    - large
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test
    - python utilities/pool.py bulk

time training scripts:
  stage: test
  tags:
    - linux
    - large
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd doc/training/test
    - rm doublet_in_fractured_medium.py  # contains holes (does not execute)
    - rm 2D_air_migration.py  # contains holes (does not execute)
    - rm init_reservoir_in_fractured_medium.py  # contains holes (does not execute)
    - python ../../../test/utilities/pool.py .  # starting scripts
    - cd ../../../test/training
    - cp ../../doc/training/test/NODES.txt .  # copy the mesh
    - cp ../../doc/training/test/TETRAS.txt .
    - cp ../../doc/training/test/GROUPS.py .
    - python init_reservoir_in_fractured_medium.py  # must execute init before doublet to reload snapshot
    - rm init_reservoir_in_fractured_medium.py # must not be relaunched in pool context
    - python ../utilities/pool.py .  # final scripts

linalg:
  stage: test
  tags:
    - linux
    - medium
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test/linalg
    - python options_test.py

more sanity tests:
  stage: test
  tags:
    - linux
    - medium
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test
    - >
      for f in \
        sanity/heat_source_analytical_1D.py \
        sanity/heat_source_analytical.py \
        sanity/vertical_column_temperature.py \
        sanity/vertical_fracture.py \
        unit/check_settings.py \
        unit/init_states.py \
        unit/vertical_well.py \
        unit/postprocess_producers.py \
        unit/check_petrophysics.py \
        unit/dof_families.py \
        unit/well_connectivity.py \
        unit/test_simulation_global_functions.py \
        unit/check_balances_two_phases.py \
        unit/random_wellheads.py \
        unit/test_set_array.py \
        unit/test_close_perforations.py \
        unit/display_model_elements.py \
        unit/one_wedge_cell_with_well.py \
        unit/check_well_information.py \
        unit/display_model_elements.py \
        unit/test_diphasic_equilibrium.py \
        unit/test_dump_residuals.py \
        unit/phase_pressure_absent_phase.py \
        unit/two_cells_time_step_manager.py \
        unit/two_cells_fracture_zero.py \
        unit/two_cells_boundary_faces.py \
        unit/salome/test_standalone.py \
        unit/salome/test_with_compass.py \
        unit/chair_well.py \
        unit/one_cell.py \
        unit/multi_segmented_well.py \
        unit/mswell_load_test.py \
        unit/mswell_only_test.py
      do
        echo "------------------------------------------------------------"
        echo "Running: $f"
        echo "------------------------------------------------------------"
        ( cd ${f%/*}; python ${f##*/} )
      done

check bug fixes:
  stage: test
  tags:
    - linux
    - medium
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test/bugs/578
    - python 578.py

postprocess:
  stage: test
  tags:
    - linux
    - medium
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test/unit
    - python two_cells.py
    - python -m ComPASS.postprocess -s -C output-two_cells

petrel:
  stage: test
  tags:
    - linux
    - medium
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test/cases/petrel
    - python doublet_on_cartesian_grid_petrel.py
    - python doublet_on_faulted_petrel_grid.py

diphasic freeflow:
  stage: test
  tags:
    - linux
    - medium
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test/cases/Bouillante/Bouillante_comparaison_these
    - python 1Dgas_atmBC.py
    - python 1Dliquid_outflow_atmBC.py
    - python 1Drain_recharge.py
    - python 1Dwater_recharge_by_atmBC.py

diphasic andra:
  stage: test
  tags:
    - linux
    - medium
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test/cases/andra
    - python 1Ddiphasic_andra.py

various parallel tests:
  stage: test
  tags:
    - linux
    - large
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test
    - >
      for f in \
        sanity/vertical_column_temperature.py \
        fast/test_nodeflags_on_tetmesh.py \
        unit/distribute_fracture_edge_info.py \
        unit/select_fracture_edges_with_node_info.py \
        unit/check_balances.py \
        unit/check_settings.py \
        unit/vertical_wells.py \
        unit/check_petrophysics.py \
        unit/dof_families.py \
        bulk/chain_random_wells.py \
        unit/well_connectivity.py \
        unit/test_close_perforations.py \
        unit/multi_segmented_well.py
      do
        echo "------------------------------------------------------------"
        echo "Running: $f"
        echo "------------------------------------------------------------"
        mpirun -n `nproc` python $f
      done

small parallel tests:
  stage: test
  tags:
    - linux
    - large
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - cd test
    - mpirun -n 2 python unit/two_cells.py
    - mpirun -n 2 python unit/two_cells_boundary_faces.py

container release:
  stage: release
  tags:
    - linux
    - medium
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - TARGET_PROJECT_PATH=$(echo "$CI_PROJECT_PATH" | tr '[:upper:]' '[:lower:]')
    - TARGET_IMAGE="${CI_REGISTRY}/${TARGET_PROJECT_PATH}:${CI_COMMIT_TAG}"
    - cp -rv dist docker/
    - docker build --force-rm -t $TARGET_IMAGE --build-arg SDK_TAG="${COMPASS_SDK}" docker
    - docker push $TARGET_IMAGE
    - docker tag $TARGET_IMAGE ${TARGET_IMAGE%\:*}:latest
    - docker push ${TARGET_IMAGE%\:*}:latest
    # after_script is executed in a separated shell context
    # i.e. does not have access to the TARGET_IMAGE variable
    # so we proceed to cleaning here
    - docker rm -f $TARGET_IMAGE
    - docker rm -f ${TARGET_IMAGE%\:*}:latest
  after_script:
    - docker logout $CI_REGISTRY

pages:
  stage: documentation
  tags:
    - linux
    - large
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  before_script:
    - python -m pip install --no-index -f dist ComPASS
  script:
    - source doc/make_the_doc --with-doxygen
    - mkdir -p public/core_reference
    - cp -rf doc/html/* public
    - cp -rf doc/doxygen/html/* public/core_reference
  artifacts:
    paths:
    - public
