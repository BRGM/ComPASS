# see https://docs.gitlab.com/ce/ci/yaml/README.html for all available options

image: docker:stable

services:
 - docker:stable-dind

stages:
    - build_docker_environments
    - build
    - test
    - release
    
variables:
  CI_REGISTRY_IMAGE: registry.gitlab.inria.fr/charms/compass

before_script:
  - echo "Preparing build..."
  - docker info
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.inria.fr
   
after_script:
  - echo "You might do some cleanup here"

# here we build specific docker environments
# (cf. miscellaneous/docker/README.md)
build_docker_environments:
  stage: build_docker_environments
  only:
    - /^docker_evt_.*$/
  script:
    - docker build --force-rm --cache-from $CI_REGISTRY_IMAGE/base-environment --pull --tag $CI_REGISTRY_IMAGE/base-environment miscellaneous/docker/base
    - docker push $CI_REGISTRY_IMAGE/base-environment
    - docker build --force-rm --cache-from $CI_REGISTRY_IMAGE/build-environment --pull --tag $CI_REGISTRY_IMAGE/build-environment miscellaneous/docker/build
    - docker push $CI_REGISTRY_IMAGE/build-environment
    - docker build --force-rm --cache-from $CI_REGISTRY_IMAGE/run-environment --pull --tag $CI_REGISTRY_IMAGE/run-environment miscellaneous/docker/run
    - docker push $CI_REGISTRY_IMAGE/run-environment
    - docker build --force-rm --cache-from $CI_REGISTRY_IMAGE/work-environment --pull --tag $CI_REGISTRY_IMAGE/work-environment miscellaneous/docker/work
    - docker push $CI_REGISTRY_IMAGE/work-environment

build:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --force-rm --cache-from $CI_REGISTRY_IMAGE:latest --pull --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    
#TODO
#how to use docker cache ? split dockerfile to have a build image.fixed.
#how to prevent from rebuild all code when only test change.
# add gitlab runner docker in slave 2 to run dind
# clean mechanism for docker images ?

integration_test:
  stage: test
  script:
    - echo "Job running with id"
    - id
    - echo "unit test with" $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    # FIXME: -t flag here is transitory (cf. issue #69)
    - docker run -t --rm -v $PWD/test/sanity:/localfs $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG vertical_column_temperature.py

interoperability_test:
  stage: test
  script:
    - docker run --rm -v $PWD/test/unit:/localfs $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG test_pass_arrays.py
  
#parallel_test:
#  stage: test
#  script:
#    # FIXME: -t flag here is transitory (cf. issue #69)
#    - docker run -t --rm -v $PWD/test/sanity:/localfs $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG --parallel vertical_column_temperature.py

# release only on master and if tests passed, maybe another tag should be
# the number in Git Tag for master! and add in only : Tag: to release only
# when master is tagged.
release:
  stage: release
  script:
    - docker pull $CI_REGISTRY_IMAGE
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:latest
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
   # - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
    - master
    - tags
  when: on_success
