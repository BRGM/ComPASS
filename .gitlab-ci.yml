variables:
  COMPASS_SDK: 0.1.5
  # We assume that is fine to run mpi as root in a docker container
  OMPI_ALLOW_RUN_AS_ROOT: 1
  OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1

image:
  name: "registry.gitlab.inria.fr/charms/compass-images/sdk:${COMPASS_SDK}"

stages:
  - check
  - build
  - test
  - release
  - documentation

check format:
  stage: check
  tags:
    - sequential
    - docker
  script:
    - |
      if [[ ${CI_COMMIT_BRANCH:0:4} == "NOCI" ]]
      then
        echo "****************************************************************"
        echo "*                                                              *"
        echo "*  Pipelines with name starting with NOCI automatically fail!  *"
        echo "*                                                              *"
        echo "****************************************************************"
        # if the project was public we could cancel the pipeline using GitLab API
        # curl --request POST --header "PRIVATE-TOKEN: ${CI_JOB_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${CI_JOB_ID}/cancel"
        exit -1
      fi
    # We could check format only for merge requests
    # using only merge_requests
    # and CI_MERGE_REQUEST_SOURCE_BRANCH_SHA and CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
    # variables but the latest are not correclyt set
    - git fetch origin ${CI_DEFAULT_BRANCH}
    - merge_base=$(git merge-base origin/${CI_DEFAULT_BRANCH} HEAD)
    - changed_files=$(git diff --no-ext-diff --name-only ${merge_base}...HEAD)
    - echo "Changed files:" ${changed_files}
    - pre-commit run --files ${changed_files}

build:
  stage: build
  tags:
    - build
    - docker
  script:
    - >
      python3 setup.py bdist_wheel -j `nproc` \
        -DComPASS_WITH_water2ph_PHYSICS=ON \
        -DComPASS_WITH_linear_water_PHYSICS=ON \
        -DComPASS_WITH_diphasic_PHYSICS=ON
  artifacts:
    paths:
    - dist/
    expose_as: wheel
    when: on_success

baseline tests:
  stage: test
  tags:
    - sequential
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test/baseline
    - >
      for f in \
        MO1/MO1.py \
        MO2/MO2-casea.py \
        MO2/MO2-caseb.py \
        MO2/MO2-casec.py \
        MO3/MO3-casea.py \
        MO3/MO3-caseb.py \
        MO4/MO4.py \
        SO1/SO1.py \
        SO2/SO2.py
      do
        echo "------------------------------------------------------------"
        echo "Running: $f"
        echo "------------------------------------------------------------"
        python3 $f
      done

baseline parallel tests:
  stage: test
  tags:
    - parallel
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test/baseline
    - >
      for f in \
        MO2/MO2-casea.py \
        MO2/MO2-caseb.py \
        MO2/MO2-casec.py \
        MO3/MO3-casea.py \
        MO3/MO3-caseb.py \
        MO4/MO4.py \
        SO1/SO1.py \
        SO2/SO2.py
      do
        echo "------------------------------------------------------------"
        echo "Running: $f"
        echo "------------------------------------------------------------"
        mpirun -n `nproc` python3 $f
      done

pytest:
  stage: test
  tags:
    - parallel
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test/fast # change directory otherwise import ComPASS conflicts with source
    - python3 -m pytest

time bulk scripts:
  stage: test
  tags:
    - parallel
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test
    - python3 utilities/pool.py bulk

linalg:
  stage: test
  tags:
    - sequential
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test/linalg
    - python3 options_test.py

more sanity tests:
  stage: test
  tags:
    - sequential
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test
    - >
      for f in \
        sanity/heat_source_analytical_1D.py \
        sanity/heat_source_analytical.py \
        sanity/vertical_column_temperature.py \
        sanity/vertical_fracture.py \
        unit/check_settings.py \
        unit/init_states.py \
        unit/vertical_well.py \
        unit/postprocess_producers.py \
        unit/check_petrophysics.py \
        unit/dof_families.py \
        unit/well_connectivity.py \
        unit/test_simulation_global_functions.py \
        unit/check_balances_two_phases.py \
        unit/random_wellheads.py \
        unit/test_set_array.py \
        unit/test_close_perforations.py \
        unit/display_model_elements.py \
        unit/one_wedge_cell_with_well.py \
        unit/check_well_information.py \
        unit/display_model_elements.py \
        unit/test_diphasic_equilibrium.py \
        unit/test_dump_residuals.py \
        unit/phase_pressure_absent_phase.py \
        unit/two_cells_time_step_manager.py \
        unit/two_cells_fracture_zero.py \
        unit/salome/test_standalone.py \
        unit/salome/test_with_compass.py \
        unit/chair_well.py
      do
        echo "------------------------------------------------------------"
        echo "Running: $f"
        echo "------------------------------------------------------------"
        ( cd ${f%/*}; python3 ${f##*/} )
      done

postprocess:
  stage: test
  tags:
    - sequential
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test/unit
    - python3 two_cells.py
    - python3 -m ComPASS.postprocess -s -C output-two_cells

petrel:
  stage: test
  tags:
    - sequential
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test/cases/petrel
    - python3 doublet_on_cartesian_grid_petrel.py

diphasic freeflow:
  stage: test
  tags:
    - sequential
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test/cases/Bouillante/Bouillante_comparaison_these
    - python3 1Dgas_atmBC.py
    - python3 1Dliquid_outflow_atmBC.py
    - python3 1Drain_recharge.py

various parallel tests:
  stage: test
  tags:
    - parallel
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test
    - >
      for f in \
        sanity/vertical_column_temperature.py \
        fast/test_nodeflags_on_tetmesh.py \
        unit/distribute_fracture_edge_info.py \
        unit/select_fracture_edges_with_node_info.py \
        unit/check_balances.py \
        unit/check_settings.py \
        unit/vertical_wells.py \
        unit/check_petrophysics.py \
        unit/dof_families.py \
        bulk/chain_random_wells.py \
        unit/well_connectivity.py \
        unit/test_close_perforations.py
      do
        echo "------------------------------------------------------------"
        echo "Running: $f"
        echo "------------------------------------------------------------"
        mpirun -n `nproc` python3 $f
      done

small parallel tests:
  stage: test
  tags:
    - parallel
    - docker
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - cd test
    - mpirun -n 2 python3 unit/two_cells.py

container release:
  stage: release
  tags:
    - shell
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - TARGET_PROJECT_PATH=$(echo "$CI_PROJECT_PATH" | tr '[:upper:]' '[:lower:]')
    - TARGET_IMAGE="${CI_REGISTRY}/${TARGET_PROJECT_PATH}:${CI_COMMIT_TAG}"
    - cp -rv dist docker/
    - docker build --force-rm -t $TARGET_IMAGE --build-arg SDK_TAG="${COMPASS_SDK}" docker
    - docker push $TARGET_IMAGE
    - docker tag $TARGET_IMAGE ${TARGET_IMAGE%\:*}:latest
    - docker push ${TARGET_IMAGE%\:*}:latest
    # after_script is executed in a separated shell context
    # i.e. does not have access to the TARGET_IMAGE variable
    # so we proceed to cleaning here
    - docker rm -f $TARGET_IMAGE
    - docker rm -f ${TARGET_IMAGE%\:*}:latest
  after_script:
    - docker logout $CI_REGISTRY

pages:
  stage: documentation
  tags:
    - sequential
    - docker
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  before_script:
    - python3 -m pip install --no-index -f dist ComPASS
  script:
    - (cd docs; /bin/bash make_the_doc)
    - mkdir -p public/core_reference
    - cp -rf docs/html/* public
    - cp -rf docs/doxygen/html/* public/core_reference
  artifacts:
    paths:
    - public
