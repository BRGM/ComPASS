
Setup
=====

>>> import numpy as np
>>> from index_zoning import ZoneManager

>>> from properties import ArrayProperty, Vector, Tensor


Des zones et des données dessus
-------------------------------

>>> n = 10
>>> mng = ZoneManager(n)
>>> za = mng.build_from_indices(range(0, n, 2))
>>> zb = mng.build_from_indices(range(0, n//2))

>>> x = np.arange(n)
>>> xa = np.arange(0, n, 2)
>>> xb = np.arange(0, n//2)


ArrayProperty sur des scalaires
===============================

constantes sur zone
-------------------

>>> p = ArrayProperty(np.float64)
>>> p.everywhere = -1
>>> p[za] = 10
>>> p[zb] = 20
>>> p[mng]
array([20., 20., 20., 20., 20., -1., 10., -1., 10., -1.])

tableaux sur zones
------------------

>>> p = ArrayProperty(np.float64)
>>> p.everywhere = -1
>>> p[za] = 10 + xa
>>> p[zb] = 20 + xb
>>> p[mng]
array([20., 21., 22., 23., 24.,  -1., 16.,  -1., 18.,  -1.])

on peut récupérer seulement une zone plutôt que tout le domaine

>>> p[za&zb]
array([20., 22., 24.])
>>> p[za|zb]
array([20., 21., 22., 23., 24., 16., 18.])

si l'info n'est pas disponible sur une partie de la zone requise, erreur

>>> p = ArrayProperty(np.float64)
>>> p[za] = 10 + xa
>>> p[zb] = 20 + xb
>>> p[za&zb]
array([20., 22., 24.])
>>> p[za|zb]
array([20., 21., 22., 23., 24., 16., 18.])
>>> p[zb.complement()]
Traceback (most recent call last):
...
KeyError: ...

constantes et tableaux sur zones
--------------------------------

>>> p = ArrayProperty(np.float64)
>>> p.everywhere = -1
>>> p[za] = 10 + xa
>>> p[zb] = 20
>>> p[mng]
array([20., 20., 20., 20., 20.,  -1., 16.,  -1., 18.,  -1.])

>>> p = ArrayProperty(np.float64)
>>> p.everywhere = -1
>>> p[za] = 10
>>> p[zb] = 20 + xb
>>> p[mng]
array([20., 21., 22., 23., 24.,  -1., 10.,  -1., 10.,  -1.])


ArrayProperty sur des vecteurs
==============================

constantes sur zone
-------------------

>>> p = ArrayProperty(Vector(2))
>>> p.everywhere = [-1, -101]
>>> p[za] = [10, 110]
>>> p[zb] = [20, 120]
>>> p[mng]
array([[  20.,  120.],
       [  20.,  120.],
       [  20.,  120.],
       [  20.,  120.],
       [  20.,  120.],
       [  -1., -101.],
       [  10.,  110.],
       [  -1., -101.],
       [  10.,  110.],
       [  -1., -101.]])

tableaux sur zones
------------------

>>> p = ArrayProperty(Vector(2))
>>> p.everywhere = [-1, -101]
>>> p[za] = [10 + xa, 110 + xa]
>>> p[zb] = [20 + xb, 120 + xb]
>>> p[mng]
array([[  20.,  120.],
       [  21.,  121.],
       [  22.,  122.],
       [  23.,  123.],
       [  24.,  124.],
       [  -1., -101.],
       [  16.,  116.],
       [  -1., -101.],
       [  18.,  118.],
       [  -1., -101.]])

on peut récupérer seulement une zone plutôt que tout le domaine

>>> p[za&zb]
array([[  20.,  120.],
       [  22.,  122.],
       [  24.,  124.]])
>>> p[za|zb]
array([[  20.,  120.],
       [  21.,  121.],
       [  22.,  122.],
       [  23.,  123.],
       [  24.,  124.],
       [  16.,  116.],
       [  18.,  118.]])

si l'info n'est pas disponible sur une partie de la zone requise, erreur

>>> p = ArrayProperty(Vector(2))
>>> p[za] = [10 + xa, 110 + xa]
>>> p[zb] = [20 + xb, 120 + xb]
>>> p[za&zb]
array([[  20.,  120.],
       [  22.,  122.],
       [  24.,  124.]])
>>> p[za|zb]
array([[  20.,  120.],
       [  21.,  121.],
       [  22.,  122.],
       [  23.,  123.],
       [  24.,  124.],
       [  16.,  116.],
       [  18.,  118.]])
>>> p[zb.complement()]
Traceback (most recent call last):
...
KeyError: ...

constantes et tableaux sur zones
--------------------------------

>>> p = ArrayProperty(Vector(2))
>>> p.everywhere = [-1, -101]
>>> p[za] = [10 + xa, 110 + xa]
>>> p[zb] = [20, 120]
>>> p[mng]
array([[  20.,  120.],
       [  20.,  120.],
       [  20.,  120.],
       [  20.,  120.],
       [  20.,  120.],
       [  -1., -101.],
       [  16.,  116.],
       [  -1., -101.],
       [  18.,  118.],
       [  -1., -101.]])

>>> p = ArrayProperty(Vector(2))
>>> p.everywhere = [-1, -101]
>>> p[za] = [10, 110]
>>> p[zb] = [20 + xb, 120 + xb]
>>> p[mng]
array([[  20.,  120.],
       [  21.,  121.],
       [  22.,  122.],
       [  23.,  123.],
       [  24.,  124.],
       [  -1., -101.],
       [  10.,  110.],
       [  -1., -101.],
       [  10.,  110.],
       [  -1., -101.]])


conversion/validation des données
=================================

il y a conversion et validation du dtype et de la shape au moment où sont passées les données

Scalaire constant
-----------------

>>> a = ArrayProperty(np.float64)
>>> a.everywhere = 1
>>> a.everywhere
1.0
>>> a.everywhere = [1, 2]
Traceback (most recent call last):
...
ValueError: ...
>>> a.everywhere = [[1, 2], [3, 4]]
Traceback (most recent call last):
...
ValueError: ...

Vecteur constant
----------------

>>> a = ArrayProperty(Vector(2))
>>> a.everywhere = 1
Traceback (most recent call last):
...
ValueError: ...
>>> a.everywhere = [1, 2]
>>> a.everywhere
array([1., 2.])
>>> a.everywhere = [[1, 2], [3, 4]]
Traceback (most recent call last):
...
ValueError: ...

Tenseur constant
----------------

Tensor(2) traduit un scalaire en identité 2x2 fois ce scalaire

>>> a = ArrayProperty(Tensor(2))
>>> a.everywhere = 1
>>> a.everywhere
array([[1., 0.],
       [0., 1.]])
>>> a.everywhere = [1, 2]
Traceback (most recent call last):
...
ValueError: ...
>>> a.everywhere = [[1, 2], [3, 4]]
>>> a.everywhere
array([[1., 2.],
       [3., 4.]])

Tableau de vecteur
------------------

shape = (2, n)

>>> a = ArrayProperty(Vector(2))
>>> a[za] = [10 + xa, 20 + xa]
>>> a[za]
array([[10., 20.],
       [12., 22.],
       [14., 24.],
       [16., 26.],
       [18., 28.]])
>>> a[za].shape
(5, 2)

shape = (n, 2)

>>> data = np.empty((len(za), 2))
>>> data[:, 0] = 10 + xa
>>> data[:, 1] = 20 + xa
>>> a = ArrayProperty(Vector(2))
>>> a[za] = data
>>> a[za]
array([[10., 20.],
       [12., 22.],
       [14., 24.],
       [16., 26.],
       [18., 28.]])
>>> a[za].shape
(5, 2)


Tableau de tenseur
------------------

shape = (2, 2, n)

>>> a = ArrayProperty(Tensor(2))
>>> a[za] = [[10 + xa, 20 + xa], [30 + xa, 40 + xa]]
>>> a[za]
array([[[10., 20.],
        [30., 40.]],
<BLANKLINE>
       [[12., 22.],
        [32., 42.]],
<BLANKLINE>
       [[14., 24.],
        [34., 44.]],
<BLANKLINE>
       [[16., 26.],
        [36., 46.]],
<BLANKLINE>
       [[18., 28.],
        [38., 48.]]])
>>> a[za].shape
(5, 2, 2)

shape = (n, 2, 2)

>>> data = np.empty((len(za), 2, 2))
>>> data[:, 0, 0] = 10 + xa
>>> data[:, 0, 1] = 20 + xa
>>> data[:, 1, 0] = 30 + xa
>>> data[:, 1, 1] = 40 + xa
>>> a = ArrayProperty(Tensor(2))
>>> a[za] = data
>>> a[za]
array([[[10., 20.],
        [30., 40.]],
<BLANKLINE>
       [[12., 22.],
        [32., 42.]],
<BLANKLINE>
       [[14., 24.],
        [34., 44.]],
<BLANKLINE>
       [[16., 26.],
        [36., 46.]],
<BLANKLINE>
       [[18., 28.],
        [38., 48.]]])
>>> a[za].shape
(5, 2, 2)
