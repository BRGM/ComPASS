# User defined CMake configuration file ---------------------------------------

# This is a template file to be used if you need to tweak compilation options
# In such situation rename this file to config.cmake in this directory
# and uncomment and edit the lines that are relevant to your needs.
# You can also add new lines to override any variable that is in the cmake CACHE.

# The setup.py script, located in the top-level directory
# will check for an existing cmake/config.cmake file, and if present,
# it will pass it to cmake through the "-C" options to override cache variables
# (cf. https://cmake.org/cmake/help/latest/manual/cmake.1.html)
# The config/config.cmake file is not to be tracked by git (it is added to .gitgnore)
# so that your personal configuration does not impact other people.

# One of the advantages of defining a config.cmake file is that you can
# preserve specific configurations even when removing the build directory and the
# CMakeCache.txt file it contains.
# You can also have different files e.g. config-devel.cmake, config-release.cmake...
# and switch between configurations modifying a symbolic link to config.cmake

#
# WARNING - Setting CMake compilers
#
# It is NOT recommended to set CMake compilers using this file.
# CMake prohibits to change the compiler after the CMake step and
# it also prohibits that the compiler variable value includes any flags.
# Trying to change a compiler will delete the cache and you would loose
# all previous settings.
#
# Prefer to pass compiler either through the CC, CXX and FC environment
# variables, e.g.:
# CC=mpicc cmake ..
# either setting the CMAKE_<LANG>_COMPILER variables
# using the -D options of the cmake executable e.g.:
# cmake -DCMAKE_C_COMPILER=mpicc -DCMAKE_Fortran_COMPILER=mpif90 ..

#
# Score-p instrumentation
#
# Because of the previous limitations scorep instrumentation must be done
# setting the SCOREP_WRAPPER variable to off
# (cf. http://scorepci.pages.jsc.fz-juelich.de/scorep-pipelines/docs/scorep-6.0/html/scorepwrapper.html)
# For example doing:
# SCOREP_WRAPPER=off CC=scorep-mpicc CXX=scorep-mpicxx FC=scorep-mpif90
# will setup cmake to instrument all files with scorep.
# The cmake script will also detect the presence of the scorep instrumentation
# testing the compiler name and if present will compile an instrumented wrapper
# for the python interpreter.

# -----------------------------------------------------------------------------

# -- Set the build configuration: Debug, Release...
# set(CMAKE_BUILD_TYPE Debug CACHE STRING "The CMake build type.")

# -- MPI configuration
# set(MPIDIR /my/path CACHE PATH "path to MPI library")

# -- PETSc configuration -- petsc lib can be found using mpicc linker flags
# set(PETSC_DIR /my/path CACHE PATH "path to PETSc library")
# set(PETSC_ARCH arch-linux-c-opt CACHE STRING "PETSc arch")

# -- Tweaks physics
# set(DEF_THERMIQUE OFF CACHE BOOL "Activate energy transfer.")
# set(ComPASS_WITH_brine_PHYSICS OFF CACHE BOOL "Compiles brine eos module.")
# set(ComPASS_WITH_diphasic_PHYSICS OFF CACHE BOOL "Compiles diphasic eos module.")
# set(ComPASS_WITH_immiscible2ph_PHYSICS OFF CACHE BOOL "Compiles subcritical 2 immiscible phases eos module.")
# set(ComPASS_WITH_linear_water_PHYSICS OFF CACHE BOOL "Compiles simplified water eos module.")
# set(ComPASS_WITH_water2ph_PHYSICS OFF CACHE BOOL "Compiles subcritical 2 phases pure water eos module.")
# set(ComPASS_WITH_diphasic_FreeFlowBC_PHYSICS OFF CACHE BOOL "Compiles advanced atmospheric boundary conditions eos module.")

# -- Experimental features
# set(ComPASS_COMPILES_EXPERIMENTAL_PARTS ON CACHE BOOL "Compiles experimental features.")
